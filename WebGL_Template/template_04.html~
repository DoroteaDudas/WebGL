<!DOCTYPE html>
<html lang="en">
	<head>
		<title>gravity habitable</title>
		<meta charset="utf-8">
		<style>
/* 			* {cursor: none;} */
/* 			* {cursor: help;} */
			body {
				margin: 0px;
				background-color: #000000;
				overflow: hidden;
			}
			#text {
				bottom			: 10px;
				left			: 10px;
				width			: 720px;
				position		: absolute;
				z-index			: 2;
				color			: #BDBDBD;
				background		: rgba(128,128,128,0.3);
				font-size		: 150%;
				padding			: 5px;
				padding-top		: 5px;
				padding-bottom	: 5px;
				border-radius	: 10px;
				border-color	: black;
				border-style	: solid;
				border-width	: 2px;	
			}
			#resetButton {
				z-index			: 2;
				background		: rgba(0,0,0,0);
				opacity			: 0.9;
				position		: absolute;
				bottom			: 20px;
				right			: 20px;
			}

			}
		</style>
	</head>
	<body >

	<div id="text">
		Just some text...<br>
		And some more...
	</div>		
	<div id="container"></div>
	<div id="resetButton"></div>

	
		<script src="scripts/three69.js"></script>
<!-- 	<script src="scripts/OrbitControls.js"></script>	 -->
		<script src="scripts/TrackballControls.js"></script>	
		<script src="scripts/ShaderParticles.js"></script>		
		<script src="scripts/jquery-1.9.1.js"></script>
		<script src="scripts/jquery-ui.js"></script>
	
		
		<script id="fragmentShader" type="x-shader/x-fragment">//basic fragment shader

// 			varying vec2 vUv;

			void main( void ) {

// 				gl_FragColor = texture2D( texture1, vUv );
				gl_FragColor = vec4(1.0,0.0,0.0,1.0);

			}

		</script>
		<script id="vertexShader" type="x-shader/x-vertex">//basic vertex shader

// 			varying vec2 vUv;

			void main()
			{

//  				vUv = uv;
				vec4 mvPosition = modelViewMatrix * vec4(position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;

			}

		</script>

 		<script id="fragmentShaderPhong" type="x-shader/x-fragment">//phong/blinn-phong fragment shader

// 			varying vec2 vUv;
// 			uniform float time;
//  		uniform vec2 resolution;
// 			uniform sampler2D texture1;
// 			uniform sampler2D texture2;
			varying vec3 vNormal;
			varying vec3 new_position;
			const vec3 lightPos = vec3(1.0,1.0,1.0);
			const vec3 ambientColor = vec3(0.1, 0.0, 0.0);
			const vec3 diffuseColor = vec3(0.5, 0.0, 0.0);
			const vec3 specColor = vec3(1.0, 1.0, 1.0);

			void main( void ) {

				vec3 normal = normalize(vNormal); 
				vec3 lightDir = normalize(lightPos - new_position);
					
				float lambertian = max(dot(lightDir,normal), 0.0);
				float specular = 0.0;
					
				if(lambertian > 0.0) {
				
					vec3 viewDir = normalize(-new_position);

// 					//phong
// 					vec3 reflectDir = reflect(-lightDir, normal);
// 					float specAngle = max(dot(reflectDir, viewDir), 0.0);
// // 					specular = pow(specAngle, 4.0);
// 					specular = pow(specAngle, 16.0);
// // 					specular *= lambertian;

					//blinn phong
					vec3 halfDir = normalize(lightDir + viewDir);
					float specAngle = max(dot(halfDir, normal), 0.0);
					specular = pow(specAngle, 16.0);

				}
				
				gl_FragColor = vec4(ambientColor + lambertian*diffuseColor + specular*specColor, 1.0);
// 				gl_FragColor = vec4(1.0,0.0,0.0,1.0);

			}

		</script>
		<script id="vertexShaderPhong" type="x-shader/x-vertex">//vertex shader (for Phong)

// 			varying vec2 vUv;
// 			uniform vec2 uvScale;
// 			uniform float time;
			uniform float amplitude;
			attribute float displacement;
			
			varying vec3 vNormal;
 			varying vec3 new_position;

			void main()
			{

//  			vUv = uvScale * uv;
// 				new_position = position + normal * vec3(1.* displacement * amplitude);//have to InitShaderAttributes to get the displacement values
				new_position = position + normal * vec3(1.* amplitude);//have to UpdateShaderUniforms() to get the amplitude value
				vec4 mvPosition = modelViewMatrix * vec4(new_position, 1.0 );
// 				vec4 mvPosition = modelViewMatrix * vec4(position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;

				//phong
				vNormal = normalize( normalMatrix * normal );
				new_position = vec3(mvPosition) / mvPosition.w;  
				  
			}
		</script>		
		
		<script id="fragmentShaderPerlin" type="x-shader/x-fragment">//perlin noise fragment shader (+blinn phong)
			
			varying vec2 vUv;
			uniform float time;
// 			uniform vec2 resolution;
			uniform sampler2D texture1;
			uniform sampler2D texture2;
		
			varying float noise;
			
 			varying vec3 new_position;
			varying vec3 vNormal;
			const vec3 lightPos = vec3(700.0,300.0,0.0);
			const vec3 ambientColor = vec3(0.1, 0.0, 0.0);
			const vec3 diffuseColor = vec3(0.5, 0.0, 0.0);
			const vec3 specColor = vec3(1.0, 1.0, 3.0);
			
			float random( vec3 scale, float seed ){return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ;}
		
			void main() {
				
				float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );// get a random offset
				vec2 tPos = vec2( 0, 1.9 * noise + r );// lookup vertically in the texture, using noise and offset to get the right RGB colour
				vec4 color = texture2D( texture2, tPos );
				gl_FragColor = vec4( color.rgb, 1.0 );
				
				
// 				vec2 position = -1.0 + 2.0 * vUv;
// 				vec4 noise = texture2D( texture1, vUv );
// 				vec2 T1 = vUv + vec2( 1.5, -1.5 ) * time * 0.02;
// 				vec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;
// 				T1.x += noise.x * 2.0;
// 				T1.y += noise.y * 2.0;
// 				T2.x -= noise.y * 0.2;
// 				T2.y += noise.z * 0.2;
// 				float p = texture2D( texture1, T1 * 2.0 ).a;//t1
// 				color = texture2D( texture2, T1 * 1.0 );//vec4 //t2 2.0
// 				vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );
// 				if( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }
// 				if( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }
// 				if( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }
// 				gl_FragColor = mix( gl_FragColor, vec4(color.rgb, gl_FragColor.w ), 0.95 );


				//blinn-phong
				vec3 normal = normalize(vNormal); 
				vec3 lightDir = normalize(lightPos - new_position);
				float lambertian = max(dot(lightDir,normal), 0.0);
				float specular = 0.0;

				if(lambertian > 0.0) {
				
					vec3 viewDir = normalize(-new_position);

// 					//phong
// 					vec3 reflectDir = reflect(-lightDir, normal);
// 					float specAngle = max(dot(reflectDir, viewDir), 0.0);
// // 					specular = pow(specAngle, 4.0);
// 					specular = pow(specAngle, 16.0);
// // 					specular *= lambertian;

					//blinn phong
					vec3 halfDir = normalize(lightDir + viewDir);
					float specAngle = max(dot(halfDir, normal), 0.0);
					specular = pow(specAngle, 16.0);
// 					specular = 0.0;

				}

				vec4 temp2 = vec4(ambientColor + lambertian*diffuseColor + specular*specColor, 1.0);
				gl_FragColor += temp2;
// 				gl_FragColor = mix(temp2, gl_FragColor, 0.5);
				
			}
		</script>
		<script id="vertexShaderPerlin" type="x-shader/x-vertex">//perlin noise

			varying vec2 vUv;
			uniform float time;
// 			uniform float amplitude;
			attribute float displacement;
			
			varying vec3 vNormal;
			varying vec3 new_position;
			
			//perlin noise for playing around

			// GLSL textureless classic 3D noise "cnoise",
			// with an RSL-style periodic variant "pnoise".
			// Author: Stefan Gustavson (stefan.gustavson@liu.se)
			// Version: 2011-10-11
			//
			// Many thanks to Ian McEwan of Ashima Arts for the
			// ideas for permutation and gradient selection.
			//
			// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
			// Distributed under the MIT license. See LICENSE file.
			// https://github.com/ashima/webgl-noise
			
			varying float noise;
			
			vec3 mod289(vec3 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
			vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
			vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}
			vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
			vec3 fade(vec3 t) {	return t*t*t*(t*(t*6.0-15.0)+10.0);	}
			float cnoise(vec3 P){// Classic Perlin noise
				vec3 Pi0 = floor(P); // Integer part for indexing
				vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
				Pi0 = mod289(Pi0);
				Pi1 = mod289(Pi1);
				vec3 Pf0 = fract(P); // Fractional part for interpolation
				vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
				vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
				vec4 iy = vec4(Pi0.yy, Pi1.yy);
				vec4 iz0 = Pi0.zzzz;
				vec4 iz1 = Pi1.zzzz;

				vec4 ixy = permute(permute(ix) + iy);
				vec4 ixy0 = permute(ixy + iz0);
				vec4 ixy1 = permute(ixy + iz1);

				vec4 gx0 = ixy0 * (1.0 / 7.0);
				vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
				gx0 = fract(gx0);
				vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
				vec4 sz0 = step(gz0, vec4(0.0));
				gx0 -= sz0 * (step(0.0, gx0) - 0.5);
				gy0 -= sz0 * (step(0.0, gy0) - 0.5);

				vec4 gx1 = ixy1 * (1.0 / 7.0);
				vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
				gx1 = fract(gx1);
				vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
				vec4 sz1 = step(gz1, vec4(0.0));
				gx1 -= sz1 * (step(0.0, gx1) - 0.5);
				gy1 -= sz1 * (step(0.0, gy1) - 0.5);

				vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
				vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
				vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
				vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
				vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
				vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
				vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
				vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

				vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
				g000 *= norm0.x;
				g010 *= norm0.y;
				g100 *= norm0.z;
				g110 *= norm0.w;
				vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
				g001 *= norm1.x;
				g011 *= norm1.y;
				g101 *= norm1.z;
				g111 *= norm1.w;

				float n000 = dot(g000, Pf0);
				float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
				float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
				float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
				float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
				float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
				float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
				float n111 = dot(g111, Pf1);

				vec3 fade_xyz = fade(Pf0);
				vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
				vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
				float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
				return 2.2 * n_xyz;
			}
			float pnoise(vec3 P, vec3 rep){// Classic Perlin noise, periodic variant
				vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
				vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
				Pi0 = mod289(Pi0);
				Pi1 = mod289(Pi1);
				vec3 Pf0 = fract(P); // Fractional part for interpolation
				vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
				vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
				vec4 iy = vec4(Pi0.yy, Pi1.yy);
				vec4 iz0 = Pi0.zzzz;
				vec4 iz1 = Pi1.zzzz;

				vec4 ixy = permute(permute(ix) + iy);
				vec4 ixy0 = permute(ixy + iz0);
				vec4 ixy1 = permute(ixy + iz1);

				vec4 gx0 = ixy0 * (1.0 / 7.0);
				vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
				gx0 = fract(gx0);
				vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
				vec4 sz0 = step(gz0, vec4(0.0));
				gx0 -= sz0 * (step(0.0, gx0) - 0.5);
				gy0 -= sz0 * (step(0.0, gy0) - 0.5);

				vec4 gx1 = ixy1 * (1.0 / 7.0);
				vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
				gx1 = fract(gx1);
				vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
				vec4 sz1 = step(gz1, vec4(0.0));
				gx1 -= sz1 * (step(0.0, gx1) - 0.5);
				gy1 -= sz1 * (step(0.0, gy1) - 0.5);

				vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
				vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
				vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
				vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
				vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
				vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
				vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
				vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

				vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
				g000 *= norm0.x;
				g010 *= norm0.y;
				g100 *= norm0.z;
				g110 *= norm0.w;
				vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
				g001 *= norm1.x;
				g011 *= norm1.y;
				g101 *= norm1.z;
				g111 *= norm1.w;

				float n000 = dot(g000, Pf0);
				float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
				float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
				float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
				float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
				float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
				float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
				float n111 = dot(g111, Pf1);

				vec3 fade_xyz = fade(Pf0);
				vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
				vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
				float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
				return 2.2 * n_xyz;
			}
			float turbulence( vec3 p ) {
				float w = 100.0;
				float t = -.5;
				for (float f = 1.0 ; f <= 10.0 ; f++ ){
					float power = pow( 2.0, f );
					t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );
// 					t +=0.1;
				}
				return t;
			}
			
 			void main()
 			{
				vUv = uv;
				
				//perlin noise
				noise = 1.0 * (-0.10) * turbulence( .5 * normal + time/2.);// get a turbulent 3d noise using the normal, normal to high freq
				float b = 1.5 * pnoise( 0.05 * position + vec3( 2.0 * time/2. ), vec3( 100.0 ) );// get a 3d noise using the position, low frequency
				float displacement2 = - noise + b;// compose both noises
				
				// move the position along the normal and transform it
// 				vec3 newPosition = position + normal * ( displacement);
				vec3 newPosition = position + normal * ( displacement2);
// 				vec4 mvPosition = modelViewMatrix * vec4(position, 1.0 );
				vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0 );
				gl_Position = projectionMatrix * mvPosition;

				//phong
				vNormal = normalize( normalMatrix * normal );
				new_position = vec3(mvPosition) / mvPosition.w;  

			}	
 		</script>

 		
		<script>//jquery buttons
			$(function() 
			{
				{//reset button
				$("#resetButton")
				.text("") // sets text to empty
				.append("<img width='"+button_width+"' height='"+button_height+"' src="+button_reset+" />")
				.button()
				.click( 
					function() 
					{ 
						window.location.reload(true);
					});
				}
			});
		</script>
 
		<script>//functions
			
			function getWindowDimensions(){
				{//Width, Height
	// 			$(window).height();   // returns height of browser viewport
	// 			$(document).height(); // returns height of HTML document
	// 			$(window).width();   // returns width of browser viewport
	// 			$(document).width(); // returns width of HTML document
	// 			var HEIGHT = $(window).height(); 
	// 			var WIDTH = $(window).width(); 
				var w = window,
					d = document,
					e = d.documentElement,
					g = d.getElementsByTagName('body')[0],
					x = w.innerWidth || e.clientWidth || g.clientWidth,
					y = w.innerHeight|| e.clientHeight|| g.clientHeight;
// 				console.log("x,y",x, y);

// 				x = document.innerWidth;
// 				y = document.innerHeight;
// 				x = window.innerWidth;
// 				y = window.innerHeight;

				}	
				
				return {
					width:  x,
					height: y
				}
			}			

			//setup three scene
			function InitThreeRenderer(Width, Height, divElement) {
					renderer = new THREE.WebGLRenderer({antialias	: true,  alpha: true});
					renderer.setSize( Width, Height );
					renderer.setClearColor( 0x000000, 0 );
					divElement.appendChild( renderer.domElement );
					
					//shadows
					renderer.shadowMapEnabled = true;
					renderer.shadowMapType = THREE.PCFSoftShadowMap;
// 					renderer.autoClear = false;//this allows rendering of two scenes together, but destroys the screen edges

					return{
						renderer: renderer, 
					}
			}	
			function InitThreeScene() {// 2x scene
					scene = new THREE.Scene();	
					scene2 = new THREE.Scene();	
			}		
			function InitThreeLights(){// ambient, directional, pointlight, spotlight
					var light0 = new THREE.AmbientLight( 0x404040 ); //  soft white light
					scene.add(light0);
					
// 					var light1 = new THREE.DirectionalLight( 0x888888, 2 );
// 					light1.position.set( 1, 1, 1  ).normalize();
//	 				scene.add(light1);

					var light2 = new THREE.PointLight( 0xffe8d9, 2, 0 );
					light2.add( new THREE.Mesh( geometry_sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) ) );
					scene.add( light2 );
					scene2.add( light2 );
					
					spotLight = new THREE.SpotLight( 0xffffff ); 
					spotLight.position.set( 0, 0, 0 );
					spotLight.target.position.set(150, 0, 0);
					spotLight.castShadow = true; 
					spotLight.shadowMapWidth = 1024; 
					spotLight.shadowMapHeight = 1024; 
					spotLight.shadowCameraNear = 15; 
					spotLight.shadowCameraFar = 240; 
					spotLight.shadowCameraFov = 40; 
	// 				spotLight.shadowCameraNear	= 0.01;		
					spotLight.shadowDarkness	= 0.9;
	// 				spotLight.shadowCameraVisible	= true;
					scene.add( spotLight );
					scene2.add( spotLight );	
					return{
						light1: light0,
						light2: light2,
						light3: spotLight
					}
			}
			function InitCamera(){//also controls
// 				camera = new THREE.PerspectiveCamera( 25, customWidth/customHeight, 1, 18000 );
				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.set(0.1,300,600);
// 					camera.position.x = 0.1;
// 					camera.position.y = 300;
// 					camera.position.z = 600;
				
				
// 				controls = new THREE.OrbitControls( camera, renderer.domElement );
				controls = new THREE.TrackballControls( camera, renderer.domElement );//gets stuck with dat.gui, fix with renderer.domElement
// 				controls.noRotate = false;
// 				controls.noZoom = false;
// 				controls.noPan = false;
// 				controls.minDistance = 500;
// 				controls.maxDistance = 1800;//1500	
				
			}				
			function InitCameras(){
				for (var ii =  views.length-1; ii >= 0; ii-- ) {

					var view = views[ii];
					camera = new THREE.PerspectiveCamera( view.fov, window.innerWidth / window.innerHeight, 1, 10000 );
					camera.position.x = view.eye[ 0 ];
					camera.position.y = view.eye[ 1 ];
					camera.position.z = view.eye[ 2 ];
					camera.up.x = view.up[ 0 ];
					camera.up.y = view.up[ 1 ];
					camera.up.z = view.up[ 2 ];
					view.camera = camera;
				
					//so I can't control all viewports, if using OrbitControls
					//one viewport (the last one, hence the reversed loop) if using TrackballControls
					//(the big canvas needs to be drawn first, otherwise it covers the small ones)
// 					controls = new THREE.TrackballControls( camera );//gets stuck with dat.gui, fix below
					controls = new THREE.TrackballControls( camera, renderer.domElement );
					controls.noZoom = false;
					controls.noPan = true;
// 					controls.minDistance = 500;
// 					controls.maxDistance = 1800;//1500	
				}
// 				return{
// 					camera1: views[0].camera,
// 					camera2: views[1].camera,
// 					camera3: views[2].camera
// 				}
			}
			
			
			//objects
			function InitEnviromentSphere(){
				var environment_geometry = new THREE.SphereGeometry(space_size, 32, 32);
// 				var environment_geometry = new THREE.SphereGeometry(space_size, 32, 32, Math.PI/2.);//texture starting at PI/2
// 				var environment_geometry = new THREE.SphereGeometry(space_size, 32, 32, 0, 2*Math.PI, 0, Math.PI);
				var environmentSphere  = new THREE.Mesh(environment_geometry, environment_material);
				environmentSphere.rotation.y = 90*Math.PI/180;//texture starting at PI/2 or y rotated PI/2
				environmentSphere.rotation.x = 61*Math.PI/180;
// 				scene.add(environmentSphere);
				scene2.add(environmentSphere);
			}
			function InitSphere(){// 2x sphere
				var material = new THREE.MeshLambertMaterial( { color: 0xFFFFFF}  );
				geometry_sphere = new THREE.SphereGeometry( size_Sphere, 32, 32 );
// 				geometry_sphere.dynamic = true;
				sphere = new THREE.Mesh( geometry_sphere, materialSH );
				scene2.add(sphere);
				
				
				var material = new THREE.MeshPhongMaterial( {wireframe:false,  color: 0xaaaaaa } );
				var geometry = new THREE.SphereGeometry( 30,16,16 );
				sphere2 = new THREE.Mesh( geometry, material );
// 				sphere2.rotation.x = 30*Math.PI/180;
// 				sphere2.position.x=-200;
// 				sphere2.position.z=-100;
// 				scene2.add(sphere2);	
				
			}
			function InitGrid(){
				GridTexture.wrapS = GridTexture.wrapT = THREE.RepeatWrapping;
				GridTexture.repeat.set( 12, 12 );
				GridTexture.offset.set( 0, 0);

				var Material = new THREE.MeshBasicMaterial( { map: GridTexture, side: THREE.DoubleSide, transparent: true, opacity: 0.3, depthWrite: false, depthTest: true } );//, alphaTest: 0.5
// 				var Geometry = new THREE.PlaneGeometry( 2000, 2000, 1, 1 );
				var Geometry = new THREE.PlaneBufferGeometry( 2000, 2000, 1, 1 );				
				
				grid = new THREE.Mesh( Geometry, Material );
				grid.position.y = 0;
				grid.rotation.x =  Math.PI / 2;
// 				grid.scale.set(0.1,0.1,0.1);
//				scene.add( grid );
				scene2.add( grid );	
			}
			function InitSprites(){

					sprite = new THREE.Sprite(new THREE.SpriteMaterial({
						map: texture_Sprite,
						transparent: true,
						blending: THREE.AdditiveBlending,
						useScreenCoordinates: true,
						color: 0xE86C19,//yellow
						depthWrite: true,
						depthTest: true,
						alphaTest: 0.2
					}));
					sprite.scale.x = size_Sprite*4.5;
					sprite.scale.y = size_Sprite*4.5;
					sprite.scale.z = 1.;
// 					scene.add(sprite);
// 					sprite.renderDepth=0;
					scene2.add(sprite);
			}
			function InitTrailParticles() {
					particleGroup = new SPE.Group({
						texture: trailTex,
						maxAge: 5
					});
						
					emitter = new SPE.Emitter({
						position: new THREE.Vector3(0, 0, 0),
						acceleration: new THREE.Vector3(0, 0, 0),
						accelerationSpread: new THREE.Vector3(0, 0, 0),
						velocity: new THREE.Vector3(0, 0, 0),
// 						colorStart: (new THREE.Color()).setRGB(0.2, 0.0, 0.9),
// 						colorStart: (new THREE.Color()).setRGB(0.0, 0.3, 1.0),
						colorStart: (new THREE.Color()).setRGB(0.4, 0.1, 1.2),
						sizeStart: 60,
						sizeEnd: 0,
						particleCount: 1500
					});

					particleGroup.addEmitter( emitter ); 
		
// 					scene.add( particleGroup.mesh );
					scene2.add( particleGroup.mesh );
			} 
			//labels (from  Lee Stemkoski https://stemkoski.github.io/Three.js/Sprite-Text-Labels.html)
			function roundRect(ctx, x, y, w, h, r){ // function for drawing rounded rectangles 
					ctx.beginPath();
					ctx.moveTo(x+r, y);
					ctx.lineTo(x+w-r, y);
					ctx.quadraticCurveTo(x+w, y, x+w, y+r);
					ctx.lineTo(x+w, y+h-r);
					ctx.quadraticCurveTo(x+w, y+h, x+w-r, y+h);
					ctx.lineTo(x+r, y+h);
					ctx.quadraticCurveTo(x, y+h, x, y+h-r);
					ctx.lineTo(x, y+r);
					ctx.quadraticCurveTo(x, y, x+r, y);
					ctx.closePath();
					ctx.fill();
					ctx.stroke();   
			}
			function makeTextSprite( message, parameters ){// from  Lee Stemkoski https://stemkoski.github.io/Three.js/Sprite-Text-Labels.html
					if ( parameters === undefined ) parameters = {};
					
					var fontface = parameters.hasOwnProperty("fontface") ? 
						parameters["fontface"] : "Arial";
					
					var fontsize = parameters.hasOwnProperty("fontsize") ? 
						parameters["fontsize"] : 18;
					
					var borderThickness = parameters.hasOwnProperty("borderThickness") ? 
						parameters["borderThickness"] : 4;
					
					var borderColor = parameters.hasOwnProperty("borderColor") ?
						parameters["borderColor"] : { r:0, g:0, b:0, a:1.0 };
					
					var backgroundColor = parameters.hasOwnProperty("backgroundColor") ?
						parameters["backgroundColor"] : { r:255, g:255, b:255, a:1.0 };

					var fontColor = parameters.hasOwnProperty("fontColor") ?
						parameters["fontColor"] : { r:0, g:0, b:0, a:1.0 };
						
// 					var spriteAlignment = THREE.SpriteAlignment.topLeft;
						
					var canvas = document.createElement('canvas');
					var context = canvas.getContext('2d');
					context.font = "Bold " + fontsize + "px " + fontface;
					
					// get size data (height depends only on font size)
					var metrics = context.measureText( message );
					var textWidth = metrics.width;
					
					// background color
					context.fillStyle   = "rgba(" + backgroundColor.r + "," + backgroundColor.g + ","
												+ backgroundColor.b + "," + backgroundColor.a + ")";
					
					// border color
					context.strokeStyle = "rgba(" + borderColor.r + "," + borderColor.g + ","
												+ borderColor.b + "," + borderColor.a + ")";

					context.lineWidth = borderThickness;
					roundRect(context, borderThickness/2, borderThickness/2, textWidth + borderThickness, fontsize * 1.4 + borderThickness, 6);
					// 1.4 is extra height factor for text below baseline: g,j,p,q.
					
					// text color
// 					context.fillStyle = "rgba(0, 0, 0, 1.0)";//black
// 					context.fillStyle = "rgba(0, 100, 255, 1.0)";//cyanish
// 					context.fillStyle = "rgba(255, 255, 255, 1.0)";//white
					context.fillStyle   = "rgba(" + fontColor.r + "," + fontColor.g + ","
												+ fontColor.b + "," + fontColor.a + ")";
					
					
					context.fillText( message, borderThickness, fontsize + borderThickness);
					
					// canvas contents will be used for a texture
					var texture = new THREE.Texture(canvas) 
					texture.needsUpdate = true;

					var spriteMaterial = new THREE.SpriteMaterial( 
						{ map: texture, useScreenCoordinates: false } );//, alignment: spriteAlignment
					var sprite = new THREE.Sprite( spriteMaterial );
					sprite.scale.set(100,50,1.0);
					return sprite;	
			}			
			function InitLabels(){

				label =  makeTextSprite( " Sphere ", 
					{ fontsize: 42, borderColor: {r:0, g:100, b:255, a:1.0}, backgroundColor: {r:180, g:180, b:180, a:0.5}, fontColor: {r:255, g:255, b:255, a:1.0}});
				label.position.set(120.,0.,0.);
				scene2.add( label );
				

			}
			function InitAxes(){
				var axis = new THREE.AxisHelper(175);
// 				axis.position.set( -40, 0, 0 );
				scene2.add(axis);  
			}
			function InitObjects(){
				
				InitEnviromentSphere();
				InitSphere();
// 				InitGrid();
// 				InitSprites();
// 				InitTrailParticles();
				
				InitLabels();
// 				InitAxes();

			}
			
			
			//various
			function InitNBody(){//empty

			}
			function InitEventControls(){//empty
		
			}			

			
			//listeners
			function onWindowResize() {
				uniforms.resolution.value.x = window.innerWidth;
				uniforms.resolution.value.y = window.innerHeight;
				console.log('resolution',window.innerWidth, window.innerHeight);
				
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			function onDocumentMouseMove( event ) {
// 				event.preventDefault();
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
// 				uniforms.mouseX.value = mouse.x;
// 				uniforms.mouseY.value = mouse.y;
// 				console.log('w h',event.clientX, event.clientY, window.innerWidth, window.innerHeight, event.clientX / window.innerWidth, event.clientY / window.innerHeight );
// 				console.log('mouse pos',mouse.x, mouse.y);
			}							
			function AddListeners(){
				window.addEventListener( 'resize', onWindowResize, false );
				window.addEventListener( 'mousemove', onDocumentMouseMove, false );				
			}

			
			//shaders
			function InitShaderAttributes(){
				var verts = sphere.geometry.vertices;
				var values = attributes.displacement.value;
				for(var v = 0; v < verts.length; v++) {
					values.push(Math.random() * 2.05);
				}				
			}
			function InitShaderUniforms(){
				uniforms.resolution.value.x = window.innerWidth;
				uniforms.resolution.value.y = window.innerHeight;
// 				uniforms.mouseX.value = mouse.x;
// 				uniforms.mouseY.value = mouse.y;
			}

			
			//animate and render
			function UpdateShaderUniforms(delta){
					
					uniforms.time.value += 0.2 * delta;
			
					uniforms.amplitude.value = Math.sin(frame);
					frame += 0.1;
					
			}
			function UpdateViewsSize() {//for various views

				if ( windowWidth != window.innerWidth || windowHeight != window.innerHeight ) {

					windowWidth  = window.innerWidth;
					windowHeight = window.innerHeight;

					renderer.setSize ( windowWidth, windowHeight );

				}

			}						
			function UpdateObjects(){

// 				var delta = 5 * clock.getDelta();
// 				time += 10.*delta; 
			
				if(sphere2){
// // 				console.log(time%360);			
					sphere2.position.x = 300.*Math.sin( (time%360)*Math.PI/180. );		
					sphere2.position.z = 300.*Math.cos( (time%360)*Math.PI/180. );	
					
					if(emitter){
						emitter.position.x = sphere2.position.x;
						emitter.position.y = sphere2.position.y;
						emitter.position.z = sphere2.position.z;		
					}
				}
				
				
				if(sprite){
					sprite.scale.x = Math.abs(0.05*Math.sin(uniforms.time.value ) + 1.0)*size_Sphere*1.0*4.5;
					sprite.scale.y = Math.abs(0.05*Math.sin(uniforms.time.value ) + 1.0)*size_Sphere*1.0*4.5;
// 					sprite.scale.z = 1.;
					sprite.material.rotation -= 0.03*Math.PI/180;
				}			
					
			}
			function animate() {
			
				controls.update();
				requestAnimationFrame( animate );
				render();
				
			}
			function render(dt) {
				
				var delta = 5 * clock.getDelta();
				time += 10.*delta; 
				
				
				//update functions
				UpdateObjects();
				UpdateShaderUniforms(delta);
// 				uniforms.time.value += 0.2 * delta;	
				if(particleGroup) particleGroup.tick( dt );
				

				//views
				if(views!=undefined){//views
				
					UpdateViewsSize();
			
					///////////////////////////////////////////////////
					view = views[0];
					camera = view.camera;
// 					view.updateCamera( camera, scene, mouseX, mouseY );
					var left   = Math.floor( windowWidth  * view.left );
					var bottom = Math.floor( windowHeight * view.bottom );
					var width  = Math.floor( windowWidth  * view.width );
					var height = Math.floor( windowHeight * view.height );
					renderer.setViewport( left, bottom, width, height );
					renderer.setScissor( left, bottom, width, height );					
					renderer.enableScissorTest ( true );
					renderer.setClearColor( view.background );
					camera.aspect = width / height;
					camera.updateProjectionMatrix();
					
// 					renderer.render( scene, camera );
					renderer.clearDepth();
					renderer.render( scene2, camera );

					///////////////////////////////////////////////////
					view = views[1];//small one
					camera = view.camera;
					var left   = Math.floor( windowWidth  * view.left );
					var bottom = Math.floor( windowHeight * view.bottom );
					var width  = Math.floor( windowWidth  * view.width );
					var height = Math.floor( windowHeight * view.height );
					renderer.setViewport( left+6, bottom+6, width-32, height-32 );
					renderer.setScissor( left, bottom, width-20, height-20 );
					renderer.enableScissorTest ( true );
					renderer.setClearColor( view.background );
					camera.aspect = width / height;
					camera.updateProjectionMatrix();
					
// // 				renderer.autoClear = true;
// 					renderer.render( scene, camera );
					renderer.clearDepth();
// 					renderer.autoClear = false;
					renderer.render( scene2, camera );
					
					///////////////////////////////////////////////////
					view = views[2];
					camera = view.camera;
					var left   = Math.floor( windowWidth  * view.left );
					var bottom = Math.floor( windowHeight * view.bottom );
					var width  = Math.floor( windowWidth  * view.width );
					var height = Math.floor( windowHeight * view.height );
					renderer.setViewport( left+6, bottom+6, width-32, height-32 );
					renderer.setScissor( left, bottom, width-20, height-20 );
					renderer.enableScissorTest ( true );
					renderer.setClearColor( view.background );
					camera.aspect = width / height;
					camera.updateProjectionMatrix();
				}	

// 				renderer.clear();
// 				renderer.render( scene, camera );
				renderer.clearDepth();
// 				renderer.autoClear = false;
				renderer.render( scene2, camera );	
			}

			
		</script>
 
		<script>//main
			{//parameters
				var customWidth = getWindowDimensions().width;
				var customHeight = getWindowDimensions().height;
				console.log(customWidth, customHeight);			
			
				var clock = new THREE.Clock();
				var mouse = new THREE.Vector3( 0, 0, 1 );//needs to initiate
				var time = 0.0;
				var frame = 0;
				
				var x;
				var space_size = 1720;
				var geometry_sphere;//light is added to it
				var size_Sphere = 50;				
				var sprite;
				var size_Sprite = 1.0;
				
// 				var renderer;
// 				var scene, scene2;
// 				var camera;
// 				var controls;
// 				var sphere, sphere2;
// 				var grid;
				var particleGroup;
				var emitter;
// 				var label;
				
				//buttons
				var button_reset = "Images/icon_reset.png";
				var button_width = 150;
				var button_height = 150;
			}
			{//camera views
				var windowWidth, windowHeight;
				var views;
// 				views = [
// 					{//large one
// 						left: 0.0,
// 						bottom: 0.0,
// 						width: 1.0,
// 						height: 1.0,
// 						background: new THREE.Color().setRGB( 0.5, 0.5, 0.7 ),
// 						eye: [ 0.1, 300, 600 ],
// 						up: [ 0, 1, 0 ],
// 						fov: 60,
// 	// 					updateCamera: function ( camera, scene, mouseX, mouseY ) {
// 	// 					  camera.position.x += mouseX * 0.05;
// 	// 					  camera.position.x = Math.max( Math.min( camera.position.x, 2000 ), -2000 );
// 	// 					  camera.lookAt( scene.position );
// 	// 					}
// 					},
// 					{//small one
// 						left: 0.009,
// 						bottom: 0.7,
// 						width: 0.15,
// 						height: 0.3,
// 						background: new THREE.Color().setRGB( 0.5, 0.5, 0.5 ),
// 						eye: [ 0, 0, 700 ],
// 						up: [ 0, 1, 0 ],
// 						fov: 65,
// 					},				
// 					{//small one
// 						left: 0.7,
// 						bottom: 0.4,
// 						width: 0.3,
// 						height: 0.6,
// 						background: new THREE.Color().setRGB( 0.5, 0.5, 0.5 ),
// 						eye: [ 0, 800, 0 ],//90 degree rotation
// 						up: [ 1, 0, 0 ],
// 						fov: 90,
// 					}
// 				];//views
			}			
			{//images / non-shader materials
				
				{//images
				//environment sphere
				var texture_environment = THREE.ImageUtils.loadTexture( 'Images/environmentc.jpg');
				var environment_material  = new THREE.MeshBasicMaterial( { map: texture_environment,  side: THREE.BackSide });

				//sprite
				var texture_Sprite = THREE.ImageUtils.loadTexture( 'Images/p_1.png');
				
				//trail particle sprite
				var trailTex = THREE.ImageUtils.loadTexture('Images/smokeparticle.png');
				
				//grid
				var GridTexture = new THREE.ImageUtils.loadTexture( 'Images/grid5b.png' );
						
				//noise
// 				var NoiseTexture = new THREE.ImageUtils.loadTexture( 'Images/cloud.png' );
				var NoiseTexture = new THREE.ImageUtils.loadTexture( 'Images/smokeparticle.png' );
						
				//stars
				var BlueStar = THREE.ImageUtils.loadTexture( 'Images/lavatile3bbb.jpg');
// 				var CyanStar = THREE.ImageUtils.loadTexture( 'Images/lavatile3b.jpg');
// 				var YellowStar = THREE.ImageUtils.loadTexture( 'Images/lavatile3.jpg');
// 				var RedStar = THREE.ImageUtils.loadTexture( 'Images/lavatile3d.jpg');
// 				var OrangeStar = THREE.ImageUtils.loadTexture( 'Images/lavatile2.jpg');
				}
				
				{//materials
// 				var material = new THREE.MeshBasicMaterial( {wireframe:true,  color: 0x303030 } );
// 				var material_red = new THREE.MeshBasicMaterial( {wireframe:true,  color: 0xcc0000 } );
// 				var material_green = new THREE.MeshBasicMaterial( {wireframe:false,  color: 0x339933 } );
// 				var material_blue = new THREE.MeshBasicMaterial( {wireframe:false,  color: 0x3399ff } );				
// 				var material_red2 =  new THREE.MeshPhongMaterial( { color: 0xcc0000, ambient: 0xff1100, side: THREE.DoubleSide, transparent:true, opacity:0.5  } );
// 				var material_green2 =  new THREE.MeshPhongMaterial( { color: 0xcc0000, ambient: 0x339933, side: THREE.DoubleSide, transparent:true, opacity:0.5 } );
// 				var material_blue2 =  new THREE.MeshPhongMaterial( { color: 0xcc0000, ambient: 0x3399ff, 	side: THREE.DoubleSide, transparent:true, opacity:0.5 } );
// 				var material_trans = new THREE.MeshBasicMaterial( {wireframe:false,  color: 0x303030, transparent:true, opacity:0.5, depthWrite: false, 	depthTest: false} );
				}
				
			}			
			{//shader materials
				var uniforms = {
					time: { type: "f", value: 1.0 },
 					resolution: { type: "v2", value: new THREE.Vector2() },
 					uvScale: { type: "v2", value: new THREE.Vector2( 3.0, 1.0 ) },
 					amplitude: { type: 'f', value: 0 },
 	 				mouseX: { type: "f", value: 0.0 },
 					mouseY: { type: "f", value: 0.0 },
 					texture1: { type: "t", value: NoiseTexture },
					texture2: { type: "t", value: BlueStar}
				};
				uniforms.texture1.value.wrapS = uniforms.texture1.value.wrapT = THREE.RepeatWrapping;
				uniforms.texture2.value.wrapS = uniforms.texture2.value.wrapT = THREE.RepeatWrapping;
				
				var attributes = {
					displacement: {type: 'f',value: [] }// an empty array 
				};
				
				var materialSH = new THREE.ShaderMaterial( {
					uniforms: uniforms, 
					attributes: attributes,
// 					wireframe: true,

// 					vertexShader: document.getElementById( 'vertexShader' ).textContent,
// 					fragmentShader: document.getElementById( 'fragmentShader' ).textContent
// 					vertexShader: document.getElementById( 'vertexShaderPhong' ).textContent,
// 					fragmentShader: document.getElementById( 'fragmentShaderPhong' ).textContent
					vertexShader: document.getElementById( 'vertexShaderPerlin' ).textContent,
					fragmentShader: document.getElementById( 'fragmentShaderPerlin' ).textContent

				} );

			}//shader stuff	
			
			window.onload = function () { 
			
				x = InitThreeRenderer(customWidth, customHeight, container);
				x = InitThreeScene();
				x = InitThreeLights();
// 				x = InitCamera();
// 				x = InitCameras();
				if(views!=undefined) x = InitCameras();//various views
				else x = InitCamera();
				
				x = InitObjects();
			
// 				x = InitEventControls();
// 				x = InitNBody();
				
				x = InitShaderUniforms();
				x = InitShaderAttributes();

				AddListeners();
				animate();
				
			}// window.onload
			
		</script> 

	</body>
</html>
